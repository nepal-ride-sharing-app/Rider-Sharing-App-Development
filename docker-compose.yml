services:
  # Services
  # Each service is built from the Dockerfile in the service directory
  # The target is set to the environment variable TARGET_ENV, defaulting to development
  # The container name is set to the service name
  # The .env file is used to set environment variables
  # The service is exposed on the specified port
  # The service code is mounted for live changes
  # The node_modules directory is mounted to ensure it is managed in the container
  # The .serverless directory is mounted to ensure local Serverless credentials are available
  # The working directory is set to /app
  # The service depends on the required services
  # The service is connected to the app-network

  # driver-service:
  #   build:
  #     context: ./services/driver-service
  #     target: ${TARGET_ENV:-development}
  #   container_name: driver-service
  #   ports:
  #     - "${DRIVER_SERVICE_PORT}:3000"
  #   env_file:
  #     - .env
  #   environment:
  #     - APP_URL=http://localhost:${DRIVER_SERVICE_PORT}
  #     - KAFKA_BROKER=${KAFKA_BROKER}
  #   volumes:
  #     - ./services/driver-service:/app/ # Mount service code for live changes
  #     - ./libs/:/app/node_modules/@nepal-ride-sharing-app/ # Mount local library for live changes
  #     - /app/node_modules # Ensure node_modules are managed in container
  #     - ./.serverless:/app/.serverless # Mount local Serverless credentials
  #   working_dir: /app
  #   depends_on:
  #     - mysql
  #     - redis
  #     - redpanda
  #     - mongo
  #     - localstack
  #   networks:
  #     - app-network

  # Images required for the services
  # LocalStack for AWS services
  # Redpanda for Kafka
  # MongoDB
  # MySQL
  # Redis

  localstack:
    image: localstack/localstack
    container_name: localstack
    ports:
      - "${LOCALSTACK_PORT}:4566" # Main LocalStack Gateway
      - "${LOCALSTACK_LAMBDA_PORT}:4571" # Lambda service
    environment:
      - SERVICES=lambda,apigateway,s3,dynamodb # Enable required AWS services
      - DEBUG=1
      - AWS_DEFAULT_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - "./localstack-data:/var/lib/localstack" # Persist LocalStack data locally
    networks:
      - app-network

  redpanda:
    image: docker.vectorized.io/vectorized/redpanda:latest
    container_name: redpanda
    command:
      - redpanda
      - start
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --overprovisioned
      - --node-id 0
      - --kafka-addr PLAINTEXT://0.0.0.0:${KAFKA_PORT},OUTSIDE://0.0.0.0:${KAFKA_PORT_OUTSIDE}
      - --advertise-kafka-addr PLAINTEXT://redpanda:${KAFKA_PORT},OUTSIDE://localhost:${KAFKA_PORT_OUTSIDE}
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
      - "${KAFKA_PORT_OUTSIDE}:${KAFKA_PORT_OUTSIDE}"
    networks:
      - app-network

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "${MONGO_PORT}:27017" # Expose MongoDB port
    volumes:
      - ./data/mongo:/data/db # Persist MongoDB data

  mysql:
    image: mysql:8.0
    container_name: mysql-db
    ports:
      - "${MYSQL_PORT}:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    volumes:
      - ./data/mysql:/var/lib/mysql # Persist MySQL data

  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./data/redis:/data # Persist Redis data

networks:
  app-network:
    driver: bridge
